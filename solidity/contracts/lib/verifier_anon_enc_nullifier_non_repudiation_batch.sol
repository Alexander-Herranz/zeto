// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier_AnonEncNullifierNonRepudiationBatch {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;

    
    uint256 constant IC0x = 12357722887397397063290914950081245251793849248136219973608200413107558910920;
    uint256 constant IC0y = 4854329681760424079200301196964804418051317992150592704945922320209960135615;
    
    uint256 constant IC1x = 63956014395582859851821628825303629935655875970108406865173081969726972902;
    uint256 constant IC1y = 19169940679514800817520883184766734364451745169600039418130572454265560347311;
    
    uint256 constant IC2x = 15427398997571969589133154066934663043827337347252514640610706292747278433505;
    uint256 constant IC2y = 19884327159083342433116467629326958804463755588270293558663980465362662596218;
    
    uint256 constant IC3x = 8148610063104875978956241605487343979737936801784359416676950253548219183236;
    uint256 constant IC3y = 4089533439583831116829823073471799713533495517978046185353982796728764229955;
    
    uint256 constant IC4x = 7108840844114926017728681076506211283148823147370606658411759973751322677551;
    uint256 constant IC4y = 8312221100225412875220163718652725860787135759731900515588860641996751963742;
    
    uint256 constant IC5x = 19999680631326588721638656816875768202230454793889563610261922453306400076130;
    uint256 constant IC5y = 17633362407863087760509350168264394964469863026887523177127675222102404259256;
    
    uint256 constant IC6x = 60279885609441586470501544699850910826054515072233718476821533324317796760;
    uint256 constant IC6y = 2516725315663124432040039464632757865919187004543500073008953173434170712586;
    
    uint256 constant IC7x = 10942107103050075991680752085891564625863246172261714023507723323085668904466;
    uint256 constant IC7y = 5046511885035709633287391484276157633944256383931871292920094733320837889372;
    
    uint256 constant IC8x = 15223708766594522541551441480963824326898785032019366523588111695837388273352;
    uint256 constant IC8y = 8810342322938657062547711804514390891167089575515108123482157066259393645618;
    
    uint256 constant IC9x = 3004783894432255319030996372658625966341900594115532630229467506364255140404;
    uint256 constant IC9y = 12422125467660955167596366046394857262007621879307660201069008164531538867380;
    
    uint256 constant IC10x = 1722258167209615251112379048587673445541134721947858309305876128399530483641;
    uint256 constant IC10y = 15524449886348292854171650721401492977394963035543173024091490277906366135977;
    
    uint256 constant IC11x = 21592897984510812153550773627299313379976483459122383749693244471661337043788;
    uint256 constant IC11y = 17941519762675431339314163204637620048456786732781035641713914464808928528439;
    
    uint256 constant IC12x = 4237745940925156367630208359633589296644574779022338678075470438485188876510;
    uint256 constant IC12y = 433954364493851845102959477381070459819715341230962919159060739441494534119;
    
    uint256 constant IC13x = 14491669273645823978974499929606006866969582729419148343660506995200367721803;
    uint256 constant IC13y = 3081998934624081013305363599487610649026921688041843666708591414597811337173;
    
    uint256 constant IC14x = 18896863432606237483862168665171171717077268283994324211536584103199966774077;
    uint256 constant IC14y = 18324640387315873978307114215871258899273231482605694887634567267251280265653;
    
    uint256 constant IC15x = 7257907485952317343097721427540411934476083429383746692189530749460986610214;
    uint256 constant IC15y = 1776493569766890289684844966784875554569858062494688791214038227117091539840;
    
    uint256 constant IC16x = 6299916359174761892719740954133625881179897201901958447088609104917110570922;
    uint256 constant IC16y = 15796238077753956781913778102621136118900485730834965507439179230972795590811;
    
    uint256 constant IC17x = 9127389414271466912041641961775565457019023441118683415454567638691635901316;
    uint256 constant IC17y = 19481349273152771703522013143120030872955602885925825988235789340763849160956;
    
    uint256 constant IC18x = 5898998139317828884955799431741821656142870336506604134992352876149231556495;
    uint256 constant IC18y = 4967391113739523186074001104946601920606148914100233483941157478448177242431;
    
    uint256 constant IC19x = 7695796572189653107388752334509061878234301305691271135574330502310426791008;
    uint256 constant IC19y = 6243130245762212387202191114739001977982873796930383403914268627979604296777;
    
    uint256 constant IC20x = 19432504217403478776598305831505791741413045942338937564035214082791549444969;
    uint256 constant IC20y = 8919329072608144502505196760677187340182427808971399957859428652821224946297;
    
    uint256 constant IC21x = 4129851084153044953515608579827890591435310100759828390707084189282091091690;
    uint256 constant IC21y = 8685570648227001842257579553857216716294209787432529264641399202841554015416;
    
    uint256 constant IC22x = 7217620719367422265456484330493776830588523307429814352334863398165756664447;
    uint256 constant IC22y = 21752837361064172344380368721330950087276122939929457204934635312514029514901;
    
    uint256 constant IC23x = 5936333528008896289130366462067790478147631702272967107288983023577627294862;
    uint256 constant IC23y = 21671803675805930345169475806127486289784464455792344875845275794023263041837;
    
    uint256 constant IC24x = 4392909485552163556697991701343430429116814514340931192238012636007118226650;
    uint256 constant IC24y = 7767760372439763147950152436626664530537575608985811556913325560253529541976;
    
    uint256 constant IC25x = 1486389658504227891054370014785187444556763426863239751980403900129636629936;
    uint256 constant IC25y = 5934715951066346523504746093485786296605813504336363002627652185736781279651;
    
    uint256 constant IC26x = 21488627634573329345772101206450014489442441883329304899678589632604545942469;
    uint256 constant IC26y = 12248084141856638440424218166548318289734004517729739759344440565187452786452;
    
    uint256 constant IC27x = 200662457781228729190802137633578866054011268760537828632647224366426565220;
    uint256 constant IC27y = 3302259500126367664676801157753220676573647645306467466772069059425544045908;
    
    uint256 constant IC28x = 13776602163180296143822318482513045976813462974737366740614478067808688416278;
    uint256 constant IC28y = 18813822646096858762417340888253109703442473009516152631225165337027236483385;
    
    uint256 constant IC29x = 17911143724269673341179642289894200814115364726467133169333530671511424027359;
    uint256 constant IC29y = 10910928214388150580396504033511313407363628143921971359972672309551192931845;
    
    uint256 constant IC30x = 13955386533152898517611334117655125836190156249960229323646141653251602652126;
    uint256 constant IC30y = 17095949402527529688324811770456126961354633370173642367182559719197098420560;
    
    uint256 constant IC31x = 3937773542856525129812102824086464766044751756853186262328435887183288977054;
    uint256 constant IC31y = 21739258497701526726359097397702636065449188046818119701938654039798602485056;
    
    uint256 constant IC32x = 21642596574441478424766066045737327189914113143531545693056512618474624298619;
    uint256 constant IC32y = 20116969253845876911372077297399145675828417636774556650636443267827293614227;
    
    uint256 constant IC33x = 4947829836428172426865912115502105627365343481076581123171879831180936553031;
    uint256 constant IC33y = 649056939278547244712654460840615359578061770606163084509869580899233953871;
    
    uint256 constant IC34x = 2346094473812104204527226114492526604824386515998120384404803589509438588245;
    uint256 constant IC34y = 7606781811385730513730207140003726004660461242216269446293196868915413416634;
    
    uint256 constant IC35x = 15485840014683707770321379533344024025246088290359056687597923597249857101735;
    uint256 constant IC35y = 6446164333603048908953482766794131860219110433201258347312294358462933719014;
    
    uint256 constant IC36x = 13834703793324347894812657507668740191087795202269093110216661815623077728364;
    uint256 constant IC36y = 6138274746252880565142497950523664096669314283185206981558850817426548405275;
    
    uint256 constant IC37x = 8612202746787293628285962739255025239388095258629714702827989723830129584056;
    uint256 constant IC37y = 13754009278123607778449255734472501080809919698287087067053676859360307940543;
    
    uint256 constant IC38x = 17508630640553929320015279287522122444980397988219072022222160116567682991714;
    uint256 constant IC38y = 13026939736944052039020694778286739416778779821170159215167626928015063326779;
    
    uint256 constant IC39x = 950359700652951359102649927183565842904235100836443610365425554684668267753;
    uint256 constant IC39y = 2861862034936719315251382247544347605182442097988770095362931975972711708697;
    
    uint256 constant IC40x = 676120242597597907739479711108831497189404299486768113234474999778618608343;
    uint256 constant IC40y = 16084502108542174852998517759098776139377792627279197252008822609915165126841;
    
    uint256 constant IC41x = 17344666889563060711567056471042897757755692285741504051950959268701368600438;
    uint256 constant IC41y = 11066405092919197069084675797065814259037285789259729679970816071735649322162;
    
    uint256 constant IC42x = 2579427148426696481338486759589487711696046548398597490877041027821267445908;
    uint256 constant IC42y = 19207992837478817009329113810674959195896534114471875473249517265303141967989;
    
    uint256 constant IC43x = 14956208701231162851414715800260383790149301553379953883396179006162282832643;
    uint256 constant IC43y = 1197111452635760157195802897806218527623756764218688544656324806908364763041;
    
    uint256 constant IC44x = 9633334638274129892717316347334533111262690010149939219787967557541281692175;
    uint256 constant IC44y = 18024934457479159911319432385465270270597349010610163623856273656114891975973;
    
    uint256 constant IC45x = 15330523911327224667409197962405204258375557128533543038591849181160010343937;
    uint256 constant IC45y = 18912796068396162872719678325296074979831586592981715033970518282523107347119;
    
    uint256 constant IC46x = 18140117478870555701262158360978644186103324009091804166794132971163266352817;
    uint256 constant IC46y = 7216705386296695807422451511767221685357121811298361271450957951223756920697;
    
    uint256 constant IC47x = 4706859506759263337681994707310026797743983248551819251685724408833457747268;
    uint256 constant IC47y = 4728546956067739545925197584083337290325109317034222778213165551063747614556;
    
    uint256 constant IC48x = 7063127309283704579090525171485217939537610632063514087676752420364351263957;
    uint256 constant IC48y = 725353811944771735958419042617388435466820781482141186234157447995160568571;
    
    uint256 constant IC49x = 6569991399871276040401270457167232895387446594750066203271236673771510387866;
    uint256 constant IC49y = 18236958640834512855122520288631490060095406626401069007361771676067258122060;
    
    uint256 constant IC50x = 273376257884754949959600129310042086004158676434934591789269251701822678013;
    uint256 constant IC50y = 20802177354733916109755996711941892650016876894536573282646288378554341094513;
    
    uint256 constant IC51x = 20008431781565148128481780677101952049411562769740462517033520841990482613714;
    uint256 constant IC51y = 18085048084438726809776889401723769303116391996500876428902462759771861543550;
    
    uint256 constant IC52x = 1334135926762510027184217006632182446188899475235200300593647968993043953624;
    uint256 constant IC52y = 14898658805787112968366004398817305259424303507412638780388641826556455488958;
    
    uint256 constant IC53x = 14086990386003260728951867836521915962308413372710402703090403120505643731719;
    uint256 constant IC53y = 4550491216677097266011498559973734046723357215975966735250738714606062557130;
    
    uint256 constant IC54x = 2275228586744382006864806429315665933842890222668263169687042442800379231042;
    uint256 constant IC54y = 14864408495706914352351695749950992535691798678343829075088883269012556499546;
    
    uint256 constant IC55x = 13278219858206869109196953169249565661008662802989951211629501242053060323542;
    uint256 constant IC55y = 16562744111205622549825150770134507090780224119516969285950588822789439446467;
    
    uint256 constant IC56x = 18435378128170116432606714146159709739968660194595671315896737350999795497217;
    uint256 constant IC56y = 6413437810202929958784178338250201336725136804669633213538813003737369971079;
    
    uint256 constant IC57x = 7703093660259146717195001181176961272390518531224230599959660746817254265699;
    uint256 constant IC57y = 1662971422902417595707272606574705833337155373069155024466249457425341060298;
    
    uint256 constant IC58x = 3891951059525600461390419860245433839959613015324828136947030680590375690215;
    uint256 constant IC58y = 11506448744044425046737852567429421300228501619202460209872315161711687819277;
    
    uint256 constant IC59x = 11506844933601623743077131643672697901203248230039224639385524214583443353288;
    uint256 constant IC59y = 19374917662018931782165304006196833068002207167568863659257625049490187111798;
    
    uint256 constant IC60x = 18109467085939985018490970117334388227017627948407527495059747384704601907699;
    uint256 constant IC60y = 5728832183981487319808134108929788399746078879188210933831480810289677687952;
    
    uint256 constant IC61x = 5505912057671306307404756763293828205558410237204821563601232735476815525311;
    uint256 constant IC61y = 18633274393123509336883679174009051786999325381511009868170599738210334040688;
    
    uint256 constant IC62x = 18273415016507657672863699933536069904408121662200653165879197841373089972054;
    uint256 constant IC62y = 21887055840177658269416887676683708250985080064752623891930158087007976407247;
    
    uint256 constant IC63x = 7249888396028821912683814939883450700004160452183974514320210613993804973330;
    uint256 constant IC63y = 10278109006766333044040933972102648019831903751745046397673765473637073161725;
    
    uint256 constant IC64x = 18857524088030913877431395591910218517660202038874654712140329487124841247831;
    uint256 constant IC64y = 5956250147773078437987476666567034615671977546992022893816122844013930943823;
    
    uint256 constant IC65x = 14754617896097928650573419832226129188805278297912971153697772320607888260109;
    uint256 constant IC65y = 4672248130019147749734779576665442078462285787933394054189689027496226507555;
    
    uint256 constant IC66x = 12904078116900652895168954906553819653334490263455866413061865107778340176503;
    uint256 constant IC66y = 4456908603056148500418019353007108847974888179835679968915207827862474404055;
    
    uint256 constant IC67x = 1552917813399244489757015520756066329428592613780645499804665579290001092140;
    uint256 constant IC67y = 10762640630199035162536807059133639704980192859739070978044920281591252768435;
    
    uint256 constant IC68x = 13742700171284387700355958387793427599608699410786556063844162580794168263617;
    uint256 constant IC68y = 10746718765378053927290423988795316141268600925336670498094691921590391470153;
    
    uint256 constant IC69x = 18642054731015731754626491389030041607032344677863786044778683025320457080328;
    uint256 constant IC69y = 8804187737015861929023363229832306198354900096467801788093280552793192280694;
    
    uint256 constant IC70x = 15404694325230142630000413695878805682192450495240055693586740915036389874942;
    uint256 constant IC70y = 10348170848941277394436745958793790878214419952388488368838987940474958599655;
    
    uint256 constant IC71x = 15489619346110565561504163884687175947548801707786435908758794223649396210829;
    uint256 constant IC71y = 3793625206037123448819562729501164365211326414020745034092694067507789331545;
    
    uint256 constant IC72x = 7511601045874622523568994161882092292760369351630950345597649693678907038678;
    uint256 constant IC72y = 14954282181229821244189027640548694875758756571349288204604639557046830612987;
    
    uint256 constant IC73x = 10397932041134516510661179086827487039232595575513964353647794403179296883783;
    uint256 constant IC73y = 21882409673654351703561796583661153963044893252777536663061028484786705481506;
    
    uint256 constant IC74x = 119035749684244683262957204649998876457241382608784388130572597693268729158;
    uint256 constant IC74y = 5234144869616607720350742632600001641074098082817849735998975808235284077521;
    
    uint256 constant IC75x = 14809809060650816550426128189128596747800701379595955053494978162737808299562;
    uint256 constant IC75y = 17207100226226301111881479508376089826293106508757229383584271120911482780747;
    
    uint256 constant IC76x = 21500354033853662864462496604784397823294806380555833580465435907821270361576;
    uint256 constant IC76y = 10519574061095429195731469445000637775726407515209002829770204720046286008158;
    
    uint256 constant IC77x = 6524099530394593369670713336029851840989018696948064260453897690561074174216;
    uint256 constant IC77y = 1210218715539233489712026084952199430965047910197948571254241559670442885758;
    
    uint256 constant IC78x = 3029308444150593179966756778598326321338597420087486327461952064196401895373;
    uint256 constant IC78y = 4011905893261035159603448370595794871687184074676879891933617530616309920723;
    
    uint256 constant IC79x = 4772157008666709788083158826034823298150023066864592956692139564470077465294;
    uint256 constant IC79y = 5252974623640482554331646661746541864554712181708696310216020037163071719925;
    
    uint256 constant IC80x = 6378929523607816281658775213619734953080469275687302644734731078368381022599;
    uint256 constant IC80y = 8304769589229131093184305600157162059604585940120891273181333285881384453217;
    
    uint256 constant IC81x = 16783771703826969582734917289139401533590323301733992821910145772236953938570;
    uint256 constant IC81y = 11138921271182998482248028676732680455540532735270446273693074686799941563980;
    
    uint256 constant IC82x = 11228973809098943158483915883100941382190735021179550334991199176675607369771;
    uint256 constant IC82y = 18626631752121749167924298449579082232997413842690335426662992940264466496186;
    
    uint256 constant IC83x = 2955963974851930218382630571969667874478377397952213230068775173208426249466;
    uint256 constant IC83y = 4812346438417622991642606074587904949189886852392085446208940690022489990152;
    
    uint256 constant IC84x = 8579928442669409193555639681689310601505342909069133022625303611870180395317;
    uint256 constant IC84y = 11974451781383442051966939853443267788559104648056480414877411894899794471602;
    
    uint256 constant IC85x = 14693823705381345641104028565695057488868476187003397354410069979924034977714;
    uint256 constant IC85y = 10808847477151605849523286773437312542339532477890697232453235329357453162609;
    
    uint256 constant IC86x = 4479853668463028432797166204803107574059199675734283182226001328527017098983;
    uint256 constant IC86y = 5857431704045640419303495181243249685629825156110128201102055248843550762186;
    
    uint256 constant IC87x = 7468951055456194936694006859348815788497596271752982801816651205771294911472;
    uint256 constant IC87y = 11210972601496318653990976821130540863130051258037861246811211641716047267789;
    
    uint256 constant IC88x = 469945491360080742593798957727349252635467160837892793328136416156838386937;
    uint256 constant IC88y = 14298226321967546221086557427667632934747326852901129340742011376758018606851;
    
    uint256 constant IC89x = 15709103612106145474807042554310279911668392578390105717492047571184884809757;
    uint256 constant IC89y = 15293256281025265669889497902766936274831632015681583910780840595141764308625;
    
    uint256 constant IC90x = 18212321727969563980575805193570825675427279799500334910566751515725575074478;
    uint256 constant IC90y = 21002071476145231856038211168155460613767919096402811430100911496812863646608;
    
    uint256 constant IC91x = 20788463823597930939051556797699382117046232296701454033805084119516630773984;
    uint256 constant IC91y = 1736813108888943735819375892083237720441626684594253306582178771925124392383;
    
    uint256 constant IC92x = 3952367761202938348214497944647528643171323966477263867352589409555081945169;
    uint256 constant IC92y = 18987289250297776358070949583722811355803149055118461778902137358571930038759;
    
    uint256 constant IC93x = 11541740478988278170353560529731342452666951557782767469600570339178903692145;
    uint256 constant IC93y = 14720712572063121746831900207388633472732527305219821816749653324157357712184;
    
    uint256 constant IC94x = 4466762382351614900111045234843961703905504182261370082335006100139580357051;
    uint256 constant IC94y = 14234293522065744182696727162390337111785343493033465012586728520792067314811;
    
    uint256 constant IC95x = 9336885020957210091725477804423160044591774004457288939713050569192398124571;
    uint256 constant IC95y = 7385691419151220727765520272307441465261543129497865923124224808836819459600;
    
    uint256 constant IC96x = 14670234264463902448311607061100232722678233796688992101768859246017661893336;
    uint256 constant IC96y = 16008416492167584057411942618774371752894794252885515758112793649769723357778;
    
    uint256 constant IC97x = 1048010112546872294412170780141258732176131238078955240129633480681118108007;
    uint256 constant IC97y = 7784348751111357327490237867639245648100361019781260846326474788754694725384;
    
    uint256 constant IC98x = 13778921581276209335457263800500897517974842776819735813578856217426195778074;
    uint256 constant IC98y = 14653754329156566557107422888746406523685203684211797888520847388227456141436;
    
    uint256 constant IC99x = 3475667029506672565347608935462533861768135738048781111983966942872000167795;
    uint256 constant IC99y = 19870060701803383012750696870254467354082269786039613272591070819493732535805;
    
    uint256 constant IC100x = 20907077814964923752097546377527242248465217084787680614749214294106298663257;
    uint256 constant IC100y = 11608396846890492075137393902552302749283346214653870889256472345901051472808;
    
    uint256 constant IC101x = 17268421130642630645871410358970846384573138558148030744025195802056584999689;
    uint256 constant IC101y = 19137841421449650496682291867339071640771756678776045049699407526328986780780;
    
    uint256 constant IC102x = 18920410666377000338509777982103238586708256206645541621158950791873430222790;
    uint256 constant IC102y = 21527830348338743033426762836958890505649532395881767228123558597933935859810;
    
    uint256 constant IC103x = 13388083302883410021259740180730805153752561957208542623785365496545975930929;
    uint256 constant IC103y = 3116057912611985612735049599891608453872083785043107121783791948047795381665;
    
    uint256 constant IC104x = 21410094649876313980419061256833999494476787778208453250265794740422137488916;
    uint256 constant IC104y = 9889750332804125071361707671092561311189976217962320566186722294079949416390;
    
    uint256 constant IC105x = 7216252783367892728121524829071845191696170036336499693001663919565940514321;
    uint256 constant IC105y = 8674096981927968983096586940286974816160504371871670976362988197518682426426;
    
    uint256 constant IC106x = 17382041370870787899143991415593158392521207231220601883114784909776718015154;
    uint256 constant IC106y = 1980169983157409170241301604228276168252322638227326026890777513927043718382;
    
    uint256 constant IC107x = 19755938367523904252273983945933693922597417119788343442343305244763358306136;
    uint256 constant IC107y = 16282856444044275789373839247796525898087321506424525764744429449696553445309;
    
    uint256 constant IC108x = 1380072869750556616110760752226507598864120033045839311082306941342995301949;
    uint256 constant IC108y = 5096890030982074747406404062307392881728952632743282086526173788041430899869;
    
    uint256 constant IC109x = 12833814553062371936091413401233246744258743817897948803999367823158556560444;
    uint256 constant IC109y = 13765448447728902380639119338258949371965502201129322928783558828550388745433;
    
    uint256 constant IC110x = 11739271722979714718129398821905876517872630131840392402340167411453799145727;
    uint256 constant IC110y = 14784602485179739184197475178634609437523789138502144027279314561186529928487;
    
    uint256 constant IC111x = 15028775137615846059512614763851018272869675335551980898858299562455259725627;
    uint256 constant IC111y = 7447134397263849978635717247111564322496924179278504269413330310341232701069;
    
    uint256 constant IC112x = 3249673272802804318208473440444746397200480614978339912902906838296233686026;
    uint256 constant IC112y = 13226886582962948052901075053326020350795244389888278130645086813891469013329;
    
    uint256 constant IC113x = 6048618134288079360104485448076929432685359297294911929407159142724989478981;
    uint256 constant IC113y = 9722651451709132285779677310347435187135233964032277035256451724721908006038;
    
    uint256 constant IC114x = 20013381896799245340531723622200060299477671068804707481559044931100984514445;
    uint256 constant IC114y = 19142437057773009982225845852176959263165072020131984757914953227023825881929;
    
    uint256 constant IC115x = 21708038979326574523029913014290690104542769618708800361043183297858029758269;
    uint256 constant IC115y = 20141045149769764243850948180059184093085096600429959457642393349250656086739;
    
    uint256 constant IC116x = 2628267100397962334192883858844970169329423547766048042624930271584933812734;
    uint256 constant IC116y = 21005050966999366304382261078754861139590548726589293793754182211231669213207;
    
    uint256 constant IC117x = 6600555417161608059064853739820756279361438097971675901390137733810193170378;
    uint256 constant IC117y = 15927730953447528101494155202763996620474160597277366946163245755514550981740;
    
    uint256 constant IC118x = 4411094665113205847064080845275963257564846583702099678172470256445845850943;
    uint256 constant IC118y = 18120230204253317710728936524333522312722354367890071431786027811056117025678;
    
    uint256 constant IC119x = 9247805990905643533150289702533445435987526910296696312207964827907113730883;
    uint256 constant IC119y = 15459915956266396989921031602484925557895885593346114726380836838205883515775;
    
    uint256 constant IC120x = 18552083157923674766934628099415637258242158662476291496469975092638235491378;
    uint256 constant IC120y = 11838369647589770586182267819705330167744551191513185278776961544581414567331;
    
    uint256 constant IC121x = 16949908582857814384688690287151407664474876089486466502994428689683792094076;
    uint256 constant IC121y = 7808814250659108500359927202986552167190380098921463971854775670999650615941;
    
    uint256 constant IC122x = 711282848291156069193819891306399456709471919453412215910724097449705163580;
    uint256 constant IC122y = 14884748204609131644728590064058492628281562495892655396553875865621646803389;
    
    uint256 constant IC123x = 2032657364747720067788228908783275683380046358026801645141508415713502695576;
    uint256 constant IC123y = 5914363038820663995500475547244658109175992156745297111797265522637209329129;
    
    uint256 constant IC124x = 11623890905067967496976882647724420211411168496767629274303031438664673072899;
    uint256 constant IC124y = 7810560704156315784781146025507474227070861999624266669582525808965551210356;
    
    uint256 constant IC125x = 18560632303762789206895995199754636841168841127106904134341952455964889809012;
    uint256 constant IC125y = 13288364853075937532531006646240143980461572456031995409723149280721744474226;
    
    uint256 constant IC126x = 19264146345909878556634797069721357655430649782493044589120367598730523176271;
    uint256 constant IC126y = 16537555075924670278259249342717254302397822705255940699388461018782847685199;
    
    uint256 constant IC127x = 18409369275573301574619959038169936117676211228320612232292676814821686152475;
    uint256 constant IC127y = 18364708213450552541060186561219057186022508025699391603481096704697097101670;
    
    uint256 constant IC128x = 16603583707734891143947689725756415885441416036736501052400305561338637684925;
    uint256 constant IC128y = 12294097766471153228685874474175466650643563500271025428433087670631408216694;
    
    uint256 constant IC129x = 5667709649717777985775354706786769093961746337322193051000113452636492151903;
    uint256 constant IC129y = 2666085764305874495571197233418226842254451711691990453531974227538954943875;
    
    uint256 constant IC130x = 19468647181955157674880368527020754909019308794770458232819091146973500408498;
    uint256 constant IC130y = 14857254276929761621971861899058895357258037351202126760822205122459297306225;
    
    uint256 constant IC131x = 3993477599721721604310010009579446878090516190588315447834584544997195548469;
    uint256 constant IC131y = 13839869003639583024522824954139828895382556977095241719782081462757786158866;
    
    uint256 constant IC132x = 9747203976224633275141173978998720637903083620518574249440111613664541856374;
    uint256 constant IC132y = 20216809872013511250437562483937657734719839914198552137947026129096272866440;
    
    uint256 constant IC133x = 2019851270530793055555406494925258249721067552955022368908740594992851683739;
    uint256 constant IC133y = 10649443098974705002532371579050808276464248857623660803039520918649890810673;
    
    uint256 constant IC134x = 18832696095432663594985245243011442607553584415722515917983902266260918277504;
    uint256 constant IC134y = 9257038651583496131618544363544938368215293283178488336663406253840268730459;
    
    uint256 constant IC135x = 21190214748248193765627649901400140672969547275926653600673506270548284601170;
    uint256 constant IC135y = 63757747482747443939717567165344222313939084149086471572442410086497081822;
    
    uint256 constant IC136x = 18526425203634124373757188172952677168724425884917605528462540460363804588339;
    uint256 constant IC136y = 11304013815724356479514091124745985753830282765132684838064879749586784204770;
    
    uint256 constant IC137x = 1367529584382342224378160359347210505958549580312935489093831349593461137930;
    uint256 constant IC137y = 1749780152221178449019430253141471316968916492434884088478602554681142233938;
    
    uint256 constant IC138x = 15401927103319854196967379260676812246142322877904565669258186116407228546950;
    uint256 constant IC138y = 20337467568477203840386251704095022942324987988008464641448622467635719520413;
    
    uint256 constant IC139x = 4693222297985140724607645520525761730168163488827410206710225783730739848329;
    uint256 constant IC139y = 4987472155742957155255339299633465990890938072864035465760556353670211069167;
    
    uint256 constant IC140x = 21014441011272582992961552533064850409892122321059500910615059744086488123391;
    uint256 constant IC140y = 17795822842476521259936038723603831376594763133559068592439075084611360889853;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[140] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                
                g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))
                
                g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))
                
                g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))
                
                g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))
                
                g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))
                
                g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))
                
                g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))
                
                g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))
                
                g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))
                
                g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))
                
                g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))
                
                g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))
                
                g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))
                
                g1_mulAccC(_pVk, IC116x, IC116y, calldataload(add(pubSignals, 3680)))
                
                g1_mulAccC(_pVk, IC117x, IC117y, calldataload(add(pubSignals, 3712)))
                
                g1_mulAccC(_pVk, IC118x, IC118y, calldataload(add(pubSignals, 3744)))
                
                g1_mulAccC(_pVk, IC119x, IC119y, calldataload(add(pubSignals, 3776)))
                
                g1_mulAccC(_pVk, IC120x, IC120y, calldataload(add(pubSignals, 3808)))
                
                g1_mulAccC(_pVk, IC121x, IC121y, calldataload(add(pubSignals, 3840)))
                
                g1_mulAccC(_pVk, IC122x, IC122y, calldataload(add(pubSignals, 3872)))
                
                g1_mulAccC(_pVk, IC123x, IC123y, calldataload(add(pubSignals, 3904)))
                
                g1_mulAccC(_pVk, IC124x, IC124y, calldataload(add(pubSignals, 3936)))
                
                g1_mulAccC(_pVk, IC125x, IC125y, calldataload(add(pubSignals, 3968)))
                
                g1_mulAccC(_pVk, IC126x, IC126y, calldataload(add(pubSignals, 4000)))
                
                g1_mulAccC(_pVk, IC127x, IC127y, calldataload(add(pubSignals, 4032)))
                
                g1_mulAccC(_pVk, IC128x, IC128y, calldataload(add(pubSignals, 4064)))
                
                g1_mulAccC(_pVk, IC129x, IC129y, calldataload(add(pubSignals, 4096)))
                
                g1_mulAccC(_pVk, IC130x, IC130y, calldataload(add(pubSignals, 4128)))
                
                g1_mulAccC(_pVk, IC131x, IC131y, calldataload(add(pubSignals, 4160)))
                
                g1_mulAccC(_pVk, IC132x, IC132y, calldataload(add(pubSignals, 4192)))
                
                g1_mulAccC(_pVk, IC133x, IC133y, calldataload(add(pubSignals, 4224)))
                
                g1_mulAccC(_pVk, IC134x, IC134y, calldataload(add(pubSignals, 4256)))
                
                g1_mulAccC(_pVk, IC135x, IC135y, calldataload(add(pubSignals, 4288)))
                
                g1_mulAccC(_pVk, IC136x, IC136y, calldataload(add(pubSignals, 4320)))
                
                g1_mulAccC(_pVk, IC137x, IC137y, calldataload(add(pubSignals, 4352)))
                
                g1_mulAccC(_pVk, IC138x, IC138y, calldataload(add(pubSignals, 4384)))
                
                g1_mulAccC(_pVk, IC139x, IC139y, calldataload(add(pubSignals, 4416)))
                
                g1_mulAccC(_pVk, IC140x, IC140y, calldataload(add(pubSignals, 4448)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            
            checkField(calldataload(add(_pubSignals, 3296)))
            
            checkField(calldataload(add(_pubSignals, 3328)))
            
            checkField(calldataload(add(_pubSignals, 3360)))
            
            checkField(calldataload(add(_pubSignals, 3392)))
            
            checkField(calldataload(add(_pubSignals, 3424)))
            
            checkField(calldataload(add(_pubSignals, 3456)))
            
            checkField(calldataload(add(_pubSignals, 3488)))
            
            checkField(calldataload(add(_pubSignals, 3520)))
            
            checkField(calldataload(add(_pubSignals, 3552)))
            
            checkField(calldataload(add(_pubSignals, 3584)))
            
            checkField(calldataload(add(_pubSignals, 3616)))
            
            checkField(calldataload(add(_pubSignals, 3648)))
            
            checkField(calldataload(add(_pubSignals, 3680)))
            
            checkField(calldataload(add(_pubSignals, 3712)))
            
            checkField(calldataload(add(_pubSignals, 3744)))
            
            checkField(calldataload(add(_pubSignals, 3776)))
            
            checkField(calldataload(add(_pubSignals, 3808)))
            
            checkField(calldataload(add(_pubSignals, 3840)))
            
            checkField(calldataload(add(_pubSignals, 3872)))
            
            checkField(calldataload(add(_pubSignals, 3904)))
            
            checkField(calldataload(add(_pubSignals, 3936)))
            
            checkField(calldataload(add(_pubSignals, 3968)))
            
            checkField(calldataload(add(_pubSignals, 4000)))
            
            checkField(calldataload(add(_pubSignals, 4032)))
            
            checkField(calldataload(add(_pubSignals, 4064)))
            
            checkField(calldataload(add(_pubSignals, 4096)))
            
            checkField(calldataload(add(_pubSignals, 4128)))
            
            checkField(calldataload(add(_pubSignals, 4160)))
            
            checkField(calldataload(add(_pubSignals, 4192)))
            
            checkField(calldataload(add(_pubSignals, 4224)))
            
            checkField(calldataload(add(_pubSignals, 4256)))
            
            checkField(calldataload(add(_pubSignals, 4288)))
            
            checkField(calldataload(add(_pubSignals, 4320)))
            
            checkField(calldataload(add(_pubSignals, 4352)))
            
            checkField(calldataload(add(_pubSignals, 4384)))
            
            checkField(calldataload(add(_pubSignals, 4416)))
            
            checkField(calldataload(add(_pubSignals, 4448)))
            
            checkField(calldataload(add(_pubSignals, 4480)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
