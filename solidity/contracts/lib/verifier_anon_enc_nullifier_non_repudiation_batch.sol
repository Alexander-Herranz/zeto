// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier_AnonEncNullifierNonRepudiationBatch {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;

    
    uint256 constant IC0x = 4462440718767044134998162351966451562518066257960346710377069184713247719285;
    uint256 constant IC0y = 4569752707050948599946597207280276287539329707858295488707483945649429752219;
    
    uint256 constant IC1x = 15444985678636809312978594800523174081806733286376064553166174284965990139183;
    uint256 constant IC1y = 15433744612719169811415194739223495951802871404441319181779987345899861341844;
    
    uint256 constant IC2x = 9885990037414753377583491462853432028093686282965905887310871111746174146380;
    uint256 constant IC2y = 20559621090064053286923137529065108649443916661380064235986881033473985498037;
    
    uint256 constant IC3x = 15220266112866916329409503976568109087433925172545814071973149694002321739963;
    uint256 constant IC3y = 9967028147547737060550357745757741357384433858664020146728346926570784983213;
    
    uint256 constant IC4x = 21329947211706016683568942206967750269087916034352353170682885227754293170481;
    uint256 constant IC4y = 18598611223760756746575538031357011297686509434289269381366033907229098220076;
    
    uint256 constant IC5x = 6514122334235498249799999850630828523118746412876175037603777859661056194113;
    uint256 constant IC5y = 7613641592052195772596513870294777261887749836185436293599101594590688831764;
    
    uint256 constant IC6x = 6746606194181022767983976806013080529050278399390805600511506371718262635580;
    uint256 constant IC6y = 5040900530838847143133329941371911710669409792156418239777488229389953818400;
    
    uint256 constant IC7x = 16310252749266624170922178444895128571401957143728059112218900449972972021945;
    uint256 constant IC7y = 19849405078170349616501907658417816640086069293900944359599337260725978612567;
    
    uint256 constant IC8x = 12943035592697513054598143597066138028290758819564583428418427834613361895771;
    uint256 constant IC8y = 17603815873244763036387162451789002048178806753191740409503763948085037340112;
    
    uint256 constant IC9x = 12904271190452756689460709035613620779998753026875639942268876213610218682758;
    uint256 constant IC9y = 3412240378584514469154301902106616900474125795462889373052017372977004157425;
    
    uint256 constant IC10x = 6331691481693568933183361080303344249163638849089168559069564832681362334724;
    uint256 constant IC10y = 8408438512114059108704924659251298284430944217379780473759408521889262932134;
    
    uint256 constant IC11x = 8041263062859819383030208297472141365592753021388417731220753939751969377673;
    uint256 constant IC11y = 15906453673686024215193939771448924145012672899421766118859189664796191133751;
    
    uint256 constant IC12x = 7215339494632317536574335410420512887140888961605922801690610674703936791690;
    uint256 constant IC12y = 5270686168977103760944011889775790356727316296740640282588783046492617013757;
    
    uint256 constant IC13x = 3217265341412273322595135399781332967556551397197686878201114947206899054156;
    uint256 constant IC13y = 7503102616401391535922628018582147279050323109558452732992780862830810951818;
    
    uint256 constant IC14x = 21246857811876870925486466013559756448469407207868226507156573943584195736416;
    uint256 constant IC14y = 2733600684692003494872043879919178019288831300666309740857197105148878418766;
    
    uint256 constant IC15x = 20600577122988085366331314426352471330562718199855297539550267926322810640841;
    uint256 constant IC15y = 16231929330271171876691408231412975041329685804795284908069818974298184549413;
    
    uint256 constant IC16x = 3013516493834933880571265579483555886116657612754656330314477838378338957763;
    uint256 constant IC16y = 4496376340543514378135122386308791454382914017654185722966748034632858780883;
    
    uint256 constant IC17x = 14566715754086819820722811868524340109011579761633272047360433652167657911302;
    uint256 constant IC17y = 5888712996271153651928451024341855957619655490208576862345200510559556697910;
    
    uint256 constant IC18x = 4481146920828229318871654483669942380846673321468443130293564421234695733769;
    uint256 constant IC18y = 20271157044718789134443586019092533529315594280339405708777284721610164653084;
    
    uint256 constant IC19x = 12058758612490882679974363077579305208323053447875272297097120038018135913052;
    uint256 constant IC19y = 15251484383604866864466202236981169528921776054941270557067166534203735798927;
    
    uint256 constant IC20x = 14361789899910818132818801031990221222431521926232911846069754141800047412360;
    uint256 constant IC20y = 3150377779097660373125294170878683323827601265329891132712370470232745767578;
    
    uint256 constant IC21x = 19363025835995411733853977290476358325305107158384513584747918019127024228124;
    uint256 constant IC21y = 18971551945271501522521473636649169684106226800265391745493927350489770667653;
    
    uint256 constant IC22x = 19094123125018762499054135540373802123371844243522347851507632970534404969456;
    uint256 constant IC22y = 16670188470952100839466765185789885210730956023356075788636114796410130484092;
    
    uint256 constant IC23x = 18122032629347733938830121928377898437942771900957000944580840182850254686544;
    uint256 constant IC23y = 5216591827501717404562544133936814946372134527719938477347011881553820377662;
    
    uint256 constant IC24x = 20338962917949833865771215887219893815884228544407317459733265502406290301230;
    uint256 constant IC24y = 18217754241610423349007139096743310765887097807831672993502649666085097852143;
    
    uint256 constant IC25x = 20415938860422927750334419431682847419560950986736944577610364321907854090207;
    uint256 constant IC25y = 1811706832137740078783015389752767524932208339888912260166095247754144082605;
    
    uint256 constant IC26x = 4009615321508047815711260104064529330703213737451287105919871546750408469276;
    uint256 constant IC26y = 18353785168680766219428431427679557273060790378919012461419940007988830704229;
    
    uint256 constant IC27x = 9111725773120243221625374051231594321895925829959250777918988474111428552809;
    uint256 constant IC27y = 8767914060970317701665738928409076785543974302457898585340147516686911169299;
    
    uint256 constant IC28x = 9843768039128456379484000470399826391786235218161014147193172378749485822345;
    uint256 constant IC28y = 5942986358657480708744873333864211643806585484697708152331924831769550465700;
    
    uint256 constant IC29x = 21775778568767886964628862364878941499703483357546030912029290600060115760142;
    uint256 constant IC29y = 14929316967024371538821998281577672404071550473413718889357628563929361046156;
    
    uint256 constant IC30x = 13927585571628534987997056150531190480940393397582513342264249485661286014978;
    uint256 constant IC30y = 18232879627291556798959023849791585712917959449605097433654417997703384643144;
    
    uint256 constant IC31x = 18717068744029556727791880077138509136276808456366864775434322758401574592031;
    uint256 constant IC31y = 14289080330654706444332688360679772953527061236492671656041020814456080933241;
    
    uint256 constant IC32x = 16538883082347184299127040695141316363634496860825578138296375998653495560797;
    uint256 constant IC32y = 838870550326759636834239199515684239156603027830904458425034813850430718985;
    
    uint256 constant IC33x = 19009604105059969680889512086998975232417248905100216470638342724167877756963;
    uint256 constant IC33y = 6887762894722810554303309191435986523098450884585415905948255411223686038312;
    
    uint256 constant IC34x = 16531683071318864874894878077899797406696996911006270311201733386895839734603;
    uint256 constant IC34y = 8666717519577217798093188521875192145777039694421065876796414865172120401375;
    
    uint256 constant IC35x = 6177777554055783807993222014736847207883074977905725744563635107454847595529;
    uint256 constant IC35y = 4263138318324315888046557447563161181503642778249092020567460303413399452760;
    
    uint256 constant IC36x = 4205536387120632613819296547301273289162157974895928179450315436333715150332;
    uint256 constant IC36y = 20312416997511154415477343858536574450102877883177957262921784717954324572426;
    
    uint256 constant IC37x = 12942617918080900315903228453269136398127168902964184649535351245368329432965;
    uint256 constant IC37y = 19157458222473093380136466829908207278488549984635155725898745872282753655398;
    
    uint256 constant IC38x = 12797139682577877058905772870479578076694731322444268435625480538739066576084;
    uint256 constant IC38y = 20727104588637013174769304334623997926735939407551079492066161364902539626657;
    
    uint256 constant IC39x = 16193627270614812573290129156347962719805742569353052701817456772794934381276;
    uint256 constant IC39y = 10942250866161132274428730958320192333701173304290140196956890358201765926569;
    
    uint256 constant IC40x = 12971960018139257046178803998989010317968596739040721055352793253859131510352;
    uint256 constant IC40y = 19283254125631514544373761191562602608074231373915387788984894295259121506408;
    
    uint256 constant IC41x = 4973223975910783897813848245279259988338994201214380734138076226251147962275;
    uint256 constant IC41y = 20308006563490699737057375027526499910953601577265600622293092320172949802335;
    
    uint256 constant IC42x = 17030317867513821418791571886460926935054674465473331652069943110476185476933;
    uint256 constant IC42y = 20572233136020505493971200425387951894248945385198937170069383285929957457043;
    
    uint256 constant IC43x = 7692553451176703422505793001654611374627553094893150073088893053319586919972;
    uint256 constant IC43y = 12753082405115929758469368345500564751358540682206343637633766733129482166950;
    
    uint256 constant IC44x = 12870749622804530478159602007951060728771320326463469142136290512480053201004;
    uint256 constant IC44y = 14895591827941652855814380755451320737860546253193499816608439236526809467098;
    
    uint256 constant IC45x = 89196947066260254533869499130107799131613847960990725360446302663710649562;
    uint256 constant IC45y = 407076608675591844134527309673272501547629118028165689413285461476628842228;
    
    uint256 constant IC46x = 14763410266333218926868118079821358534475399613923338328605601243110555424754;
    uint256 constant IC46y = 17599204885038240804241721503294011005635060311218576426371347302446614183376;
    
    uint256 constant IC47x = 10118726747047738678104431085895810720035635051697291562288025077298088214733;
    uint256 constant IC47y = 19322776357993901409655478160822770136901958925596664461964210451717594181232;
    
    uint256 constant IC48x = 17433596912197488142536558811210087828544024952005985935923537263724296695715;
    uint256 constant IC48y = 10563946409897498644381864090366712696299250976464889740911072749915084138898;
    
    uint256 constant IC49x = 13437595226325828138834863780845764635828817268034607359176754616642326181698;
    uint256 constant IC49y = 8377501808190853158752612250000097188008118650864377354654651658326636024296;
    
    uint256 constant IC50x = 18380606598711703423374534752675429629825934246200986774111473072918584427127;
    uint256 constant IC50y = 14232575728529611668428027475223047875946997946012917158798714777202094329503;
    
    uint256 constant IC51x = 722367671757803999310885906594262002822084370153325403880129053184420701885;
    uint256 constant IC51y = 16991411294824433258874180108296453730430695993836125555989956901768262080509;
    
    uint256 constant IC52x = 13496020518115514933800937650955414355602397955693565400373440221057424537585;
    uint256 constant IC52y = 21065909895058099897589334673787294003396134826786731888651936425421401478719;
    
    uint256 constant IC53x = 19623439250443309619091947329218651409469889127936492083551551030014415896214;
    uint256 constant IC53y = 2625205233558748178418480276522280268356341127041102822640388160424014599246;
    
    uint256 constant IC54x = 18346431934989235235833835905032456484485923699641645879365705207333658419610;
    uint256 constant IC54y = 517136907682197625978064556574394476141925443618454737065827648376316242433;
    
    uint256 constant IC55x = 3138979905429106492828819779751961380852688942103014057270129945377102144728;
    uint256 constant IC55y = 4903465287653415944608220202728816459875049299077299191348062489631432289882;
    
    uint256 constant IC56x = 3818666132496281252885342231969340100538892736272659098800199156423224696365;
    uint256 constant IC56y = 16725255918872290527175982515440134508971630677817020227810816026732210759797;
    
    uint256 constant IC57x = 15849945242555071680578608251305533796240075167241767933635389762711709136304;
    uint256 constant IC57y = 19623688497762019513766109452410765776236408137598055032664841343031733872901;
    
    uint256 constant IC58x = 15716627876476566418700698390911198187392470943729864252876805318847758555152;
    uint256 constant IC58y = 21542720348956544826709230687050296321659755973899277940138213870535244729164;
    
    uint256 constant IC59x = 21693658306551142818774093970554285626530270967824079536598117886288628593146;
    uint256 constant IC59y = 924528975935198499881293343023992285582826421462419983235368422315682295343;
    
    uint256 constant IC60x = 2378988107331033347460850151679461477793580217621829504536004163397015104074;
    uint256 constant IC60y = 12839955041049287886502233201322183004427713008073313732274669695946418614228;
    
    uint256 constant IC61x = 21832468341560924658936327710153414558584780085683422694779457426165847177089;
    uint256 constant IC61y = 117312274264272090414958277926262025708715360017579806546714831556964057144;
    
    uint256 constant IC62x = 3018238629968161579494804425259779540781422065436598113149379387035094736680;
    uint256 constant IC62y = 8568458668401807393362413596709511290191073330862014248063413032803554773399;
    
    uint256 constant IC63x = 1282793573958458968971927933094471206080893678228175350336079122446958404776;
    uint256 constant IC63y = 12498603528174334143768096584632542894223916853926331868937535155229078638823;
    
    uint256 constant IC64x = 9617959971065461584955469690391462382117093995070687589510083232925219095129;
    uint256 constant IC64y = 11018863524303246149442260755881908287922941691112564596126416087093604345628;
    
    uint256 constant IC65x = 18494675724266065932303746924977017396929113474307371806359401523788727941102;
    uint256 constant IC65y = 16097535133295928634162162517780143088230159419521341109791303759244723908021;
    
    uint256 constant IC66x = 3415083099541466355922472786777524696440486815659826538362856059090168466055;
    uint256 constant IC66y = 21843737062657972494870832477594000579903382696442884201323513267380462660556;
    
    uint256 constant IC67x = 4627469073003492692081267340370476560059598725588643453272534146391992363677;
    uint256 constant IC67y = 3394839797037366879180540434526009043184480393900353544974252557966593979511;
    
    uint256 constant IC68x = 16855117520614012750593394661559522115224312772742007753023953667480926227578;
    uint256 constant IC68y = 17816700617479284171736370741327140530451913327152676849112278920461098914234;
    
    uint256 constant IC69x = 3512208942781784738441229046544557918978151298191395832170296860208887519468;
    uint256 constant IC69y = 2505225700037331828802591636773326790452866581901318024097244918874744068789;
    
    uint256 constant IC70x = 11811112894872754299085263479604560501590590478241268189245643688628440648683;
    uint256 constant IC70y = 18546962230916329328755427039622326464268028514850216640604830927968030769941;
    
    uint256 constant IC71x = 17329412769385041011755512074931622014464544007921945629255020213102531435089;
    uint256 constant IC71y = 8532056905413803097496014769465279358661845164966338552710370018656926026144;
    
    uint256 constant IC72x = 12499852871185561422253376167019799648735207172681464009840294461239195188222;
    uint256 constant IC72y = 20319333061740917925764368843994465380456164024362416598740064213349463358219;
    
    uint256 constant IC73x = 13611836739262056798799919892708716022648332399944377961590069121334082918207;
    uint256 constant IC73y = 1840281673669819140440191639717881323130098454217953330681420681771305528256;
    
    uint256 constant IC74x = 3080059060826164654915928266386228070871170799938996404113716331864067144292;
    uint256 constant IC74y = 12503063943054595204075468765331127452619970579940584908913636468482392270520;
    
    uint256 constant IC75x = 16433923389361333775927126833800818558680612925507786003170775000710001722305;
    uint256 constant IC75y = 10503596066126211820217060014066415391057376892373743702389353058655984064889;
    
    uint256 constant IC76x = 15065785319856470226961945722003203551387687174246998508091850983372092860681;
    uint256 constant IC76y = 17896225228571809315986423739118202445046664678781781514879686360269381776743;
    
    uint256 constant IC77x = 6870507339911801179138872152150615339958013992518264372631788950671523537614;
    uint256 constant IC77y = 18037987737220811416285453912965586061676687691975309793517013459422037469273;
    
    uint256 constant IC78x = 11822997279102317026991317765680191121052478599918882398078859661358268572609;
    uint256 constant IC78y = 9534844203451570681341326976899711845339261467471924061990479104987248699193;
    
    uint256 constant IC79x = 814895131247362788031531982991074036243262345850417573362708717291604432861;
    uint256 constant IC79y = 21119163236943748654854615264754138892357106429981990456746055653318414462289;
    
    uint256 constant IC80x = 20977523352094306502640039044972336388464193873230419392339943532501600182549;
    uint256 constant IC80y = 6946114395405271880485956008591194883884526407256410182099924261288084717296;
    
    uint256 constant IC81x = 7761194069996716601950630741239994979663258841042742617860461241304593607995;
    uint256 constant IC81y = 6797191380097140836268094911544893630353880091765474528227264913999543456188;
    
    uint256 constant IC82x = 5000779558587306016002634421106764294422377396987971375779683765476680617367;
    uint256 constant IC82y = 2847606885305153491337801029460483228469102266671889774030818592958554461000;
    
    uint256 constant IC83x = 2751416486345290827256675548931184221845108475099448535337243712621306648334;
    uint256 constant IC83y = 13178855505750200729609370638681050600585376172418107165516640570458326734329;
    
    uint256 constant IC84x = 2231240240887990908791102754456950032619892746141888228754833711047565335291;
    uint256 constant IC84y = 8186246799537450893888429295287350584243812961324933766087162379650650478146;
    
    uint256 constant IC85x = 6763520269685728106480261588448536867109810505037764388066571118455009345663;
    uint256 constant IC85y = 13992198566440164726742004323044186581843713357791293320583243615794358038697;
    
    uint256 constant IC86x = 15119414408862590555871972886368557114099256030532542417814685037330684720768;
    uint256 constant IC86y = 12651960976713863505082588076208802297943780899939898803346701374131052398909;
    
    uint256 constant IC87x = 21408174621836638638819070586317447414399450694528139169612961883475232668246;
    uint256 constant IC87y = 8578504868019990506679317007240468112720944674191565915486280347133203190720;
    
    uint256 constant IC88x = 2782647542257934843851469693770665300487229167835685576077113843718087959867;
    uint256 constant IC88y = 8867931823375641744668523057812106126349767332031839302450573191270189134171;
    
    uint256 constant IC89x = 11081787434921178311521055933193567788981208429171218116392059771404415915928;
    uint256 constant IC89y = 13788691199354900700437740369989382948494894015767885728090020000181419577173;
    
    uint256 constant IC90x = 20412142355431119883654327361709186157969186949695197008618502840030428727513;
    uint256 constant IC90y = 2637978714522201963297964679788704513672820014439747969926130681129386713861;
    
    uint256 constant IC91x = 16239438031981465694184986627702858819230905991973519513613416477752335486284;
    uint256 constant IC91y = 586067010227246804824172701580729134690358529668454744500238895375711939871;
    
    uint256 constant IC92x = 6929626034770046196919926728056089724077903835689930035058009754021646837317;
    uint256 constant IC92y = 14007720231836246873596106523297514407552613621031343551101023830932032505831;
    
    uint256 constant IC93x = 16191063119243167501349773152042552977077071420162570551428089527910135791691;
    uint256 constant IC93y = 2984063520247837772995081663217075179586748361247613654084564271711901631617;
    
    uint256 constant IC94x = 1805678180711203997152780674041106704122361139443780127259289188160052960798;
    uint256 constant IC94y = 15270845587733837292535075619741580576161184393824166722506351632755753865314;
    
    uint256 constant IC95x = 3030851989242786878227015219826255264454396167798762189510444533025354203347;
    uint256 constant IC95y = 16780636433243520227559677544450077156636715628577721858217260980176889413252;
    
    uint256 constant IC96x = 4997143430537083890383903744684245387767882305763508413837134908583524834001;
    uint256 constant IC96y = 8464708169272634602912508283222037851304014468407864911550343690773336631317;
    
    uint256 constant IC97x = 19449990402403926111015018329109064212719623759776180438013078952765416102804;
    uint256 constant IC97y = 21012811006445063812663363396478099871012832817952978452182474412706339501325;
    
    uint256 constant IC98x = 21410072561093014667243485477372681620347269649123295559095808164172911680365;
    uint256 constant IC98y = 19048135683243837600048166328392524449612017127669778956891490700257195759044;
    
    uint256 constant IC99x = 21807812488351239382456202149286344533518638925893692239226566402570030214620;
    uint256 constant IC99y = 3629742897674077941851845853759045237433919524958880146116523921237166952508;
    
    uint256 constant IC100x = 12427392476134497199132588563614579041639492579857449719794721285072670141886;
    uint256 constant IC100y = 12371491225153780473943451544387687913512052832901359322741447080589728901639;
    
    uint256 constant IC101x = 18443769813381837683086382929315220708416867094711673553986325183433940633782;
    uint256 constant IC101y = 13338795090806453026229937430211181391630005899559855875683874904665077837972;
    
    uint256 constant IC102x = 7574561200290261962423462434572163854621504572881617953107242661231763189666;
    uint256 constant IC102y = 21866390679404529040744442684466099062367291297634322269244096831308344158789;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[102] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, r)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }
